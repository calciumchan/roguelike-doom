#library "main"
#include "zcommon.acs"

global int 24:rldata[];

/*
------------------------------ GENERAL DATA
0 INIT
1 floor
2 time
	0,1,2 day
	3 evening
	4 night
3 theme
4 timer

5 color r
6 color g
7 color b

8 fade r
9 fade g
10 fade b

11 light level
12 fog level
13 weather
	0 normal
	1 rain
	2 snow
	3 ash
	4 magic
14 weather intensity
15 wind x
16 wind y
17 
18 desaturation
20 nextworldfloor
21 world
22 is in roguelike
23 holding chamber x
24 holding chamber y
25 death cam TID
------------------------------ MEMORY
50-79 map numbers
90-99 themes
------------------------------ PLAYER DATA 100 + ID + :
0 alive
1 floor reached

*/

//------------------------------------------------------------------------------CALLED EACH RUN
function void rl_init(void){
	if(rldata[0]==0){
		//set init flag
		rldata[0] = 1;
		
		//set floor number
		rldata[1] = 0;
		
		//set time of day
		rldata[2] = random(0,1);
		
		//set theme
		rldata[3] = random(1,2);
		
		//set timer
		rldata[4] = 0;
		
		//color
		rldata[5] = 255;
		rldata[6] = 255;
		rldata[7] = 255;
		
		//fade
		rldata[8] = random(200,255);
		rldata[9] = random(200,255);
		rldata[10] = random(200,255);
		
		//light level
		rldata[11] = random(250,255);
		
		//fog
		rldata[12] = random(0,10);
		
		//weather
		rldata[13] = random(0,2);
		
		//desat
		rldata[18] = 0; 
		
		//SET NEXT WORLD CHANGE
		rldata[20] = 3;
		
		//RESET WORLD COUNT
		rldata[21] = 0;
		
		//RESET ROGUELIKE FLAG
		rldata[22] = 0;
	}
}

//------------------------------------------------------------------------------CALLED EACH LEVEL
function void rl_levelstart(void){
	//RESET TIMER
	rldata[4] = 10500;
	
	
	//weather wind direction
	rldata[15] = random(rldata[14] * -1,rldata[14])<<16;
	rldata[16] = random(rldata[14] * -1,rldata[14])<<16;
}

//------------------------------------------------------------------------------CALLED EACH WORLD
function void rl_worldstart(void){
	//SET THEME
	rldata[3] = random(1,2);
	
	//INCRIMENT TIME
	rldata[2]++;
	if(rldata[2] >= 5){
		rldata[2] = 0;
	}
	
	//WEATHER
	if(random(0,100)<30){
		//NORMAL OR WEATHER EFFECT
		if(random(0,100)<80){
			//RAIN AND SNOW
			rldata[13] = random(1,2);
		}else{
			if(random(0,100) < 95 || rldata[2] != 4){
				//ASH
				rldata[13] = 3;
			}else{
				//MAGIC
				rldata[13] = 4;
			}
		}
	}else{
		//NORMAL
		rldata[13] = 0;
	}
	
	//weather intensity
	rldata[14] = random(0,5);
	
	//desaturation
	rldata[18] = 0;
	if(rldata[13] == 3){
		rldata[18] = 150;
	}
	
	//COLOR AND FOG
	rldata[12] = random(0,20); //fog
	//COLOR
	rldata[5] = 255; //r
	rldata[6] = 255; //g
	rldata[7] = 255; //b
	//FADE
	rldata[8] = 255; //r
	rldata[9] = 255; //g
	rldata[10] = 255; //b
	if(rldata[13] != 0){
		switch(rldata[13]){
			//rain
			case 1:
				rldata[5] = random(100,200);
				rldata[6] = random(100,200);
				rldata[7] = random(200,255);
				rldata[8] = random(0,16);
				rldata[9] = random(0,16);
				rldata[10] = random(16,32);
				rldata[12] = random(100,200);
				break;
			//snow
			case 2:
				rldata[12] = random(32,400);
				break;
			//ash
			case 3:
				rldata[12] = random(400,510);
				break;;
			//magic
			case 4:
				rldata[5] = 100;
				rldata[6] = 255;
				rldata[7] = 100;
				rldata[8] = 0;
				rldata[9] = 50;
				rldata[10] = 0;
				rldata[12] = 510;
				break;
		}
	}else{
		if(rldata[2] < 3){
			//COLOR
			rldata[5] = random(245,255); //r
			rldata[6] = random(245,255); //g
			rldata[7] = random(250,255); //b
			//FADE
			rldata[8] = 255; //r
			rldata[9] = 255; //g
			rldata[10] = 255; //g
			//FOG
			rldata[12] = random(0,10);
		}else if(rldata[2] == 3){
			//COLOR
			rldata[5] = random(220,255); //r
			rldata[6] = random(100,200); //g
			rldata[7] = random(100,150); //b
			//FADE
			rldata[8] = random(220,255); //r
			rldata[9] = random(100,200); //g
			rldata[10] = random(100,150); //b
			//FOG
			rldata[12] = random(50,100);
		}else if(rldata[2] == 4){
			//COLOR
			rldata[5] = random(100,255); //r
			rldata[6] = random(100,255); //g
			rldata[7] = random(100,255); //b
			//FADE
			rldata[8] = random(0,100); //r
			rldata[9] = random(0,100); //g
			rldata[10] = random(0,100); //b
			//FOG
			rldata[12] = random(400,510);
		}
	}
	
	//LIGHT LEVEL
	if(rldata[2] == 0){
		rldata[11] = random(100,200);
	}else if(rldata[2] == 1){
		rldata[11] = random(240,255);
	}else if(rldata[2] == 2){
		rldata[11] = random(200,240);
	}else if(rldata[2] == 3){
		rldata[11] = random(150,200);
	}else if(rldata[2] == 4){
		rldata[11] = random(40,50);
	}
	if(rldata[13] == 4){
		rldata[11] = 10;
	}
	
}

//------------------------------------------------------------------------------WEATHER
function void rl_weatherstep(void){
	int x = getactorx(0);
	int y = getactory(0);
	int z = getactorz(0);
	for(int i = 0; i <= rldata[14]; i++){
		switch(rldata[13]){
			//RAIN
			case 1:
				spawnparticle(
					0xffffff,
					true,
					random(64,255),
					random(1,16),
					x+random(-256.0,256.0),
					y+random(-256.0,256.0),
					z+random(-256.0,256.0),
					rldata[15] + random(-0.1,0.1),
					rldata[16] + random(-0.1,0.1),
					random(-32.0,-16.0),
					0,
					0,
					-5,
					255,
					-1
				);
				break;
			//SNOW
			case 2:
				spawnparticle(
					0xffffff,
					true,
					random(64,255),
					random(1,8),
					x+random(-256.0,256.0),
					y+random(-256.0,256.0),
					z+random(-256.0,256.0),
					rldata[15] + random(-0.1,0.1),
					rldata[16] + random(-0.1,0.1),
					random(-0.5,00),
					0,
					0,
					-0.05,
					255,
					-1
				);
				break;
			//ASH
			case 3:
				spawnparticle(
					0xffdddd,
					true,
					random(64,255),
					random(1,8),
					x+random(-256.0,256.0),
					y+random(-256.0,256.0),
					z+random(-256.0,256.0),
					rldata[15] + random(-0.1,0.1),
					rldata[16] + random(-0.1,0.1),
					random(-0.5,1.0),
					0,
					0,
					random(-0.01,0.05),
					255,
					-1
				);
				break;
			//MAGIC
			case 4:
				spawnparticle(
					0x00ff00,
					true,
					random(64,255),
					random(1,4),
					x+random(-256.0,256.0),
					y+random(-256.0,256.0),
					z+random(-256.0,256.0),
					random(-0.1,0.1),
					random(-0.1,0.1),
					0,
					0,
					0,
					0.01,
					255,
					-1
				);
				break;
		}
		
	}
}

script "main_player" enter{
	setplayerproperty(0,0,prop_totallyfrozen);
	if(rldata[22]==1){
	}
}


script "rl_level_bounds" (int w, int h){
	int x = getactorx(0);
	int y = getactory(0);
	w = w << 16;
	h = h << 16;
	delay(1);
	while(1==1){
		if(rldata[13]!= 0){
			for(int i = 0; i < (rldata[14]*10) + 1; i ++){
				int spawnx = x+random(0,w);
				int spawny = y-random(0,h);
				int spawnz = -99999.0;
				spawnforced("rl_weather_spawner",spawnx,spawny,spawnz);
			}
		}
		delay(1);
	}
}




script "main_world" open{
	if(thingcountname("rl_level_bounds",0) > 0){
		//INIT DATA
		rl_init();
		//INIT WORLD
		if(rldata[22] == 1 && rldata[1] == 0){
			rl_worldstart();
		}
		//LEVEL INIT
		rl_levelstart();
		
		
		//REPLACE TEXTURES
		rl_make_board();
		rl_texture_replacer(rldata[3]);
		
		//SET UP LEVEL
		acs_namedexecutealways("fuck zandronum",0);
		int e = 0;
		for(int i = 0; i < 99999; i ++){
			setfogdensity(i,rldata[12]);
			sector_setfade(i,rldata[8],rldata[9],rldata[10]);
			sector_setcolor(i,rldata[5],rldata[6],rldata[7],rldata[18]);
			light_changetovalue(i,rldata[11]);
			e++;
			if(e>1000){
				e = 0;
				delay(1);
			}
		}
		
		//LOOP
		while(1==1){
			//check if all players are dead
			int deadplayers = 0;
			for(i = 0; i < 100; i++){
				if(checkplayercamera(i) == rldata[25]){
					deadplayers++;
				}
			}
			if(deadplayers >= playercount() && rldata[25] != 0){
				rldata[0] = 0;
				delay(140);
				ChangeLevel("RLDSTART",0,CHANGELEVEL_NOINTERMISSION|CHANGELEVEL_RESETHEALTH|CHANGELEVEL_RESETINVENTORY);
			}
			//delay
			delay(1);
		}
	}
}

function void rl_texture_replacer (int theme){
	//int theme = random(1,2);
	
	str numb = strparam(i:theme,s:"");
	if(theme < 10){
		numb = strparam(s:"00",s:numb);
	}else if(theme < 100){
		numb = strparam(s:"0",s:numb);
	}
	

	replacetextures("rldf1",strparam(s:"rlf1",s:numb));
	replacetextures("rldc1",strparam(s:"rlc1",s:numb));
	replacetextures("rldw1",strparam(s:"rlw1",s:numb));
	replacetextures("rldwt1",strparam(s:"rlwt1",s:numb));
	replacetextures("rlds1",strparam(s:"rls1",s:numb));
	replacetextures("rldfd1",strparam(s:"rlfd1",s:numb));
	replacetextures("rldwd1",strparam(s:"rlwd1",s:numb));
	replacetextures("rldwdl1",strparam(s:"rldl1",s:numb));
		
	replacetextures("rldf2",strparam(s:"rlf2",s:numb));
	replacetextures("rldc2",strparam(s:"rlc2",s:numb));
	replacetextures("rldw2",strparam(s:"rlw2",s:numb));
	replacetextures("rldwt2",strparam(s:"rlwt2",s:numb));
	replacetextures("rlds2",strparam(s:"rls2",s:numb));
	replacetextures("rldfd2",strparam(s:"rlfd2",s:numb));
	replacetextures("rldwd2",strparam(s:"rlwd2",s:numb));
	replacetextures("rldwdl2",strparam(s:"rldl2",s:numb));
	
	
	replacetextures("rldtr",strparam(s:"rltr",s:numb));
	replacetextures("rldwin",strparam(s:"rlwin",s:numb));
	
	changesky(strparam(s:"rlsk",s:numb),"");
	setskyscrollspeed(1,random(0,0.01));
}

//BOARD MAKER
function void rl_make_board(void){
	//MAKE CORNERS
	replacetextures("RLDB1","RLBTL",NOT_BOTTOM);
	replacetextures("RLDB1","RLBBL",NOT_TOP);
	replacetextures("RLDB16","RLBTR",NOT_BOTTOM);
	replacetextures("RLDB16","RLBBR",NOT_TOP);
	//ADD LEVEL NUMBERS
	int boardspacetofill = 2;
	for(int i = 100000; i > 0; i/=10){
		if(rl_numberinplace(rldata[21]+1,i) != -1){
			replacetextures(strparam(s:"RLDB",i:boardspacetofill),strparam(s:"RLBNO",i:rl_numberinplace(rldata[21]+1,i)),NOT_BOTTOM);
			boardspacetofill++;
		}
	}
	replacetextures(strparam(s:"RLDB",i:boardspacetofill),"RLBNOD",NOT_BOTTOM);
	boardspacetofill++;
	for(i = 100000; i > 0; i/=10){
		if(rl_numberinplace(rldata[1]+1,i) != -1){
			replacetextures(strparam(s:"RLDB",i:boardspacetofill),strparam(s:"RLBNO",i:rl_numberinplace(rldata[1]+1,i)),NOT_BOTTOM);
			boardspacetofill++;
		}
	}
	//ADD LEVEL CONDITIONS
	replacetextures("RLDB2",strparam(s:"RLBW",i:rldata[13]),NOT_TOP);
	//FILL IN
	for(i = 0; i <= 16; i++){
		replacetextures(strparam(s:"RLDB",i:i),"RLBT",NOT_BOTTOM);
		replacetextures(strparam(s:"RLDB",i:i),"RLBB",NOT_TOP);
	}
}
//GET NUMBER IN n PLACE
function int rl_numberinplace(int number, int place){
	if(number < place){
		return -1;
	}else{
		for(int i = 1000000; i > place; i /= 10){
			while(number > i){
				number-= i;
			}
		}
		int returnvar=0;
		while( number >= place){
			number-=place;
			returnvar++;
		}
		if(returnvar >= 10){
			return 0;
		}else{
			return returnvar;
		}
		
	}
	return 0;
}

script "fuck zandronum" (void){
	int e = 0;
	for(int i = 0; i < 99999; i ++){
		if(rldata[13] == 3){
			light_glow(i,rldata[11]+10,rldata[11],16);
			sector_setfloorglow(i,32,255,0,0);
		}
		if(rldata[13] == 4){
			light_glow(i,rldata[11]+20,rldata[11],128);
			sector_setfloorglow(i,32,0,255,0);
		}
		e++;
		if(e>1000){
			e = 0;
			delay(1);
		}
	}
}
 
script "rl_end" (int tojump){
	log(i:tojump);
	//START RUN
	if(rldata[22]!=1){
		rldata[22] = 1;
	}else{
		rldata[1] ++;
 	}
	
	//JUMP WORLDS
	rldata[21] += tojump;
	
	//INCREMENT WORLD
	if(rldata[1] >= rldata[20]){
		rldata[21]++;
		rldata[1] = 0;
	}
	
	//GOTO LEVEL
	ChangeLevel(rl_get_level_name(5/*random(1,5)*/),0,CHANGELEVEL_NOINTERMISSION|CHANGELEVEL_PRERAISEWEAPON);
}

function str rl_get_level_name (int lvl){
	str numb = "";
	if(lvl < 10 ){
		numb = strparam(s:"0000",i:lvl);
	}else if(lvl < 100 ){
		numb = strparam(s:"000",i:lvl);
	}else if(lvl < 1000 ){
		numb = strparam(s:"00",i:lvl);
	}else if(lvl < 10000 ){
		numb = strparam(s:"0",i:lvl);
	}else{
		numb = strparam(s:"",i:lvl);
	}
	return(strparam(s:"rlm",s:numb));
}

script "player_death" death{
	if(rldata[22] == 1){
		delay(70);
		fadeto(0,0,0,0,0);
		//show_stats();
		changecamera(rldata[25],0,0);
	}
}

script "player_respawn" respawn{
	fadeto(0,0,0,0,0);
	if(rldata[22] == 1){
		clearinventory();
		show_stats();
		fadeto(0,0,0,0,0);
		setactorposition(0,rldata[23]+((playernumber() << 16)*64),rldata[24],0,false);
		setplayerproperty(0,1,prop_totallyfrozen);
		changecamera(rldata[25],0,0);
	}
}

script "rl_holding_chamber" (void){
	rldata[23] = getactorx(0);
	rldata[24] = getactory(0);
}

function void show_stats (void){
	SetFont("BIGFONT");
	hudmessagebold(s:"PLAYER KILLED";HUDMSG_fadeout,50,cr_yellow,0.5,0.05,35,35,1.0);
}

script "rl_make_deathcam" (void){
	rldata[25] = UniqueTID(500);
	spawnforced("securitycamera", getactorx(0),getactory(0),getactorz(0),rldata[25],getactorangle(0)>>8);
}